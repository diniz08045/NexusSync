Application Overview:

My Flask web application is structured using blueprints for modularity and scalability. It is designed to clearly distinguish roles between admin and normal users, ensuring secure, role-based access control.

UI/UX Features:

Responsive Design: Consistent, intuitive UI with separate layouts for admin (admin_index.html) and regular users (user_index.html).

Profile Management: Users can view their profiles and edit information via a dedicated edit_profile.html page that mirrors the profile view but includes editable fields.

Notifications System: Real-time notifications, with functionalities to fetch, mark as read, ignore, and retrieve notifications based on dates.

Authentication Pages: User-friendly login and registration pages, clearly structured for easy navigation.

Backend Features:

User Authentication & Security:

Login & Registration: Secure login process with hashing for password security.

Session Management: Stores and verifies user sessions, includes detection of changes in user-agent, IP, or MAC address to prompt re-login for enhanced security.

Two-Factor Authentication (2FA): Additional security layer implemented via tokens.

Password Reset & Email Confirmation: Secure token-based password reset and email confirmation handled via dedicated password_reset_tokens table.

Database Management:

SQLite Database: Managed via SQLAlchemy, encapsulating all table definitions within models.py.

User Roles: Clearly defined user roles (admin and regular users), stored in the database and managed through dedicated logic.

Cookie Management: Centralized handling of cookies in a dedicated cookies.py file, which requires the Flask secret key to be set securely.

Search & Indexing:

Elasticsearch Integration: Provides efficient searching capabilities directly from Elasticsearch with automated indexing handled by elasticSearch.py.

Caching and Rate Limiting:

Redis Integration: Caching capabilities and rate-limiting through Flask-Limiter, configured to avoid in-memory storage and using Redis for optimal performance.

Error Handling:

Modular and robust error handling structured in a separate errorHandlers.py file for maintainability and scalability.

Deployment & Configuration:

Dynamic Configuration: Environment variables for critical configuration details, such as REDIS_HOST, REDIS_PORT, ELASTICSEARCH_HOST, and ELASTICSEARCH_PORT, for easy deployment and scalability.

GitHub & Version Control:

Git Integration: Project hosted on GitHub, managed through Visual Studio Code to facilitate development across multiple devices and collaborators.

Project Structure:

/flask-app
│
├── main.py (App initialization, secret keys, blueprint registration)
├── models.py (Database and schema definitions)
├── userFunctions.py (User-specific logic)
├── adminFunctions.py (Admin-specific logic)
├── elasticSearch.py (Search indexing logic)
├── cookies.py (Cookie management)
├── errorHandlers.py (Error management)
├── templates
│   ├── admin_index.html
│   ├── user_index.html
│   ├── profile.html
│   ├── edit_profile.html
│   ├── login.html
│   └── registration.html
├── static
│   ├── css
│   └── js
└── requirements.txt